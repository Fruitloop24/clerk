{
  "files": {
    "tiers_component": "frontend-v2/src/components/Tiers.tsx",
    "pricing_card": "frontend-v2/src/components/PricingCard.tsx",
    "tier_comparison": "frontend-v2/src/components/TierComparison.tsx",
    "feature_list": "frontend-v2/src/components/FeatureList.tsx"
  },
  "component_templates": {
    "Tiers.tsx": "import React from 'react';\nimport PricingCard from './PricingCard';\nexport default function Tiers({ tiers }) {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-{{tiers.length}} gap-6\">\n      {tiers.map(t => (\n        <PricingCard key={t.name} name={t.name} price={t.price} limit={t.limit} priceId={t.priceId} />\n      ))}\n    </div>\n  );\n}",
    "PricingCard.tsx": "import React from 'react';\nexport default function PricingCard({ name, price, limit, priceId }) {\n  const displayLimit = limit === Infinity ? 'Unlimited' : `${limit} requests/month`;\n  const displayPrice = `$${(price / 100).toFixed(2)}/mo`;\n  const handleSubscribe = async () => {\n    const res = await fetch(`${import.meta.env.VITE_API_URL}/api/create-checkout`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ priceId }),\n    });\n    const { url } = await res.json();\n    window.location.href = url;\n  };\n  return (\n    <div className=\"p-6 border rounded-lg shadow-sm\">\n      <h3 className=\"text-xl font-semibold\">{name}</h3>\n      <p className=\"mt-2 text-gray-600\">{displayLimit}</p>\n      <p className=\"mt-1 text-2xl font-bold\">{displayPrice}</p>\n      <button onClick={handleSubscribe} className=\"mt-4 w-full bg-blue-600 text-white py-2 rounded\">Subscribe</button>\n    </div>\n  );\n}",
    "TierComparison.tsx": "import React from 'react';\nexport default function TierComparison({ tiers }) {\n  return (\n    <table className=\"min-w-full divide-y divide-gray-200\">\n      <thead className=\"bg-gray-50\">\n        <tr>\n          <th></th>\n          {tiers.map(t => (<th key={t.name} className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">{t.name}</th>))}\n        </tr>\n      </thead>\n      <tbody className=\"bg-white divide-y divide-gray-200\">\n        <tr>\n          <td className=\"px-6 py-4\">Price</td>\n          {tiers.map(t => (<td key={t.name} className=\"px-6 py-4\">${(t.price/100).toFixed(2)}/mo</td>))}\n        </tr>\n        <tr>\n          <td className=\"px-6 py-4\">Limit</td>\n          {tiers.map(t => (<td key={t.name} className=\"px-6 py-4\">{t.limit === Infinity ? 'Unlimited' : t.limit}</td>))}\n        </tr>\n      </tbody>\n    </table>\n  );\n}",
    "FeatureList.tsx": "import React from 'react';\nexport default function FeatureList({ features }) {\n  return (\n    <ul className=\"list-disc list-inside space-y-1\">\n      {features.map((f, i) => (<li key={i}>{f}</li>))}\n    </ul>\n  );\n}"
  },
  "customer_portal": {
    "invoke": "async function openCustomerPortal() {\n  const res = await fetch(`${import.meta.env.VITE_API_URL}/api/customer-portal`, { method: 'POST', headers: { Authorization: `Bearer ${localStorage.getItem('token')}` } });\n  const { url } = await res.json();\n  window.location.href = url;\n}",
    "description": "Call the customer portal API and redirect the user to Stripe's hosted portal."
  },
  "docs": {
    "cf_pages_env": {
      "url": "https://developers.cloudflare.com/pages/platform/environment-variables/",
      "description": "How to add environment variables in the Cloudflare Pages dashboard."
    },
    "vite_env": {
      "url": "https://vitejs.dev/guide/env-and-mode.html",
      "description": "Vite environment variables and modes reference."
    }
  },
  "local_dev": {
    "url": "http://localhost:5173",
    "description": "Local development URL for the frontend."
  },
  "ai_guidance": {
    "description": "You can use your IDE's AI assistant or other AI tools to modify Tailwind classes and component layouts using natural language. The provided templates are safe to experiment with and won't break core functionality."
  }
}
