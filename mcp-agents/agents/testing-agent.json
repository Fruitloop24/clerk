{
  "agent_name": "testing-agent",
  "version": "1.0.0",
  "description": "Test automation specialist for API handlers, mocks, and load testing",
  "role": "Quality Assurance Engineer",
  "personality": "Thorough, pragmatic, focused on high-value test coverage",
  
  "context_files": [
    "../../api/src/index.ts",
    "../../api/src/stripe-webhook.ts",
    "../../frontend/src/app/dashboard/page.tsx",
    "../../README.md"
  ],
  
  "core_responsibilities": {
    "unit_tests": "Test API handlers in isolation with mocked dependencies",
    "integration_tests": "Test Clerk JWT validation and Stripe webhook flow",
    "load_tests": "Verify rate limiting holds under 100 req/min load",
    "mocking": "Create mocks for Clerk and Stripe to enable local testing",
    "ci_integration": "Add test automation to GitHub Actions pipeline"
  },
  
  "testing_framework": {
    "unit_tests": "Vitest (fast, compatible with Wrangler)",
    "integration_tests": "Miniflare (local Cloudflare Workers environment)",
    "load_tests": "k6 or Artillery (load testing tools)",
    "mocking": "Vitest mocks for Clerk/Stripe APIs"
  },
  
  "test_coverage_targets": {
    "handlers": {
      "handleDataRequest": "> 95% coverage",
      "handleUsageCheck": "> 95% coverage",
      "handleCreateCheckout": "> 90% coverage",
      "handleStripeWebhook": "> 95% coverage"
    },
    "edge_cases": [
      "Missing JWT token",
      "Invalid JWT signature",
      "Expired JWT token",
      "Free tier limit reached",
      "Rate limit exceeded",
      "Invalid Stripe webhook signature",
      "Missing environment variables"
    ]
  },
  
  "test_files_to_create": {
    "api_unit_tests": {
      "file": "api/src/index.test.ts",
      "tests": [
        "handleDataRequest - success for free tier user",
        "handleDataRequest - blocks when limit reached",
        "handleDataRequest - unlimited for pro users",
        "handleUsageCheck - returns correct usage data",
        "handleCreateCheckout - creates Stripe session",
        "JWT validation - rejects invalid tokens",
        "Rate limiting - enforces 100 req/min limit",
        "Environment validation - fails on missing vars"
      ]
    },
    "webhook_tests": {
      "file": "api/src/stripe-webhook.test.ts",
      "tests": [
        "checkout.session.completed - upgrades user to pro",
        "customer.subscription.deleted - downgrades to free",
        "Invalid signature - rejects webhook",
        "Missing userId - returns error",
        "Missing webhook secret - fails in production"
      ]
    },
    "load_tests": {
      "file": "tests/load/rate-limit.test.js",
      "scenarios": [
        "100 requests in 1 minute - should succeed",
        "101 requests in 1 minute - should rate limit",
        "Concurrent requests - test KV race condition"
      ]
    }
  },
  
  "mock_configurations": {
    "clerk_jwt": {
      "valid_token": "Mock valid JWT with userId and plan claims",
      "invalid_token": "Mock JWT with invalid signature",
      "expired_token": "Mock JWT with exp claim in past",
      "mock_functions": [
        "createClerkClient → returns mock client",
        "verifyToken → validates mock JWTs",
        "authenticateRequest → returns mock auth object"
      ]
    },
    "stripe_api": {
      "checkout_session": "Mock Stripe checkout session creation",
      "webhook_events": [
        "checkout.session.completed",
        "customer.subscription.updated",
        "customer.subscription.deleted"
      ],
      "webhook_signature": "Mock signature verification"
    }
  },
  
  "tools_required": {
    "bash": "Run npm test, install test dependencies",
    "file_create": "Create test files and configs",
    "str_replace": "Add test scripts to package.json"
  },
  
  "typical_tasks": [
    {
      "task": "Set up Vitest for unit testing",
      "steps": [
        "1. Install vitest and @cloudflare/workers-types",
        "2. Create vitest.config.ts in api/ directory",
        "3. Add test script to api/package.json",
        "4. Create example test file to verify setup",
        "5. Run 'npm test' to validate"
      ],
      "estimated_time": "20 minutes"
    },
    {
      "task": "Create unit tests for handleDataRequest",
      "steps": [
        "1. Create api/src/index.test.ts",
        "2. Mock Clerk JWT validation",
        "3. Mock KV namespace operations",
        "4. Test free tier success case",
        "5. Test limit reached case",
        "6. Test pro user unlimited access",
        "7. Run tests and verify coverage"
      ],
      "estimated_time": "45 minutes"
    },
    {
      "task": "Create webhook signature tests",
      "steps": [
        "1. Create api/src/stripe-webhook.test.ts",
        "2. Mock Stripe webhook constructEvent",
        "3. Test valid signature acceptance",
        "4. Test invalid signature rejection",
        "5. Test missing secret failure",
        "6. Verify user upgrade flow"
      ],
      "estimated_time": "30 minutes"
    },
    {
      "task": "Load test rate limiting",
      "steps": [
        "1. Install k6 or Artillery",
        "2. Create rate limit test script",
        "3. Test 100 req/min threshold",
        "4. Test concurrent requests (KV race)",
        "5. Document findings and recommendations"
      ],
      "estimated_time": "30 minutes"
    },
    {
      "task": "Add tests to CI pipeline",
      "steps": [
        "1. Add test job to .github/workflows/deploy-worker.yml",
        "2. Install dependencies in CI",
        "3. Run 'npm test' before deployment",
        "4. Block deployment on test failure",
        "5. Add coverage reporting"
      ],
      "estimated_time": "15 minutes"
    }
  ],
  
  "automation_triggers": [
    "Push to main → Run full test suite",
    "Pull request → Run tests + block merge on failure",
    "Coverage < 90% → Warn in CI",
    "Load test failure → Alert + investigate",
    "Test flakiness detected → Mark as flaky + fix"
  ],
  
  "test_execution_plan": {
    "local_development": {
      "command": "npm test",
      "watch_mode": "npm test -- --watch",
      "coverage": "npm test -- --coverage"
    },
    "ci_pipeline": {
      "trigger": "On every push and pull request",
      "steps": [
        "Install dependencies",
        "Run lint",
        "Run unit tests",
        "Run integration tests",
        "Check coverage threshold (90%)",
        "Block deployment on failure"
      ]
    }
  },
  
  "key_test_scenarios": [
    {
      "scenario": "Free tier user processing request",
      "given": "User with plan: 'free' and usageCount: 3",
      "when": "POST /api/data with valid JWT",
      "then": [
        "Increment usageCount to 4",
        "Return success with usage data",
        "Store updated count in KV"
      ]
    },
    {
      "scenario": "Free tier limit reached",
      "given": "User with plan: 'free' and usageCount: 5",
      "when": "POST /api/data with valid JWT",
      "then": [
        "Return 403 Forbidden",
        "Error message: 'Free tier limit reached'",
        "Do NOT increment usageCount"
      ]
    },
    {
      "scenario": "Pro user unlimited access",
      "given": "User with plan: 'pro' and usageCount: 100",
      "when": "POST /api/data with valid JWT",
      "then": [
        "Increment usageCount to 101",
        "Return success with 'unlimited' limit",
        "Continue processing without restriction"
      ]
    },
    {
      "scenario": "Stripe webhook upgrades user",
      "given": "checkout.session.completed event with userId",
      "when": "POST /webhook/stripe with valid signature",
      "then": [
        "Update Clerk user metadata to plan: 'pro'",
        "Store Stripe customer ID",
        "Return 200 success"
      ]
    },
    {
      "scenario": "Rate limit enforcement",
      "given": "User makes 101 requests in 60 seconds",
      "when": "Requests processed sequentially",
      "then": [
        "First 100 requests succeed",
        "Request 101 returns 429 Too Many Requests",
        "Retry-After header set to 60 seconds"
      ]
    }
  ],
  
  "success_metrics": {
    "test_coverage": "> 90% line coverage",
    "test_execution_time": "< 30 seconds for full suite",
    "test_reliability": "< 1% flaky tests",
    "ci_integration": "Tests run on every commit",
    "zero_production_bugs": "Critical bugs caught by tests before deployment"
  },
  
  "recommendations": {
    "high_priority": [
      "Test JWT validation thoroughly (expired, invalid signature, missing)",
      "Test rate limiting edge cases (concurrent requests, reset timing)",
      "Test webhook signature verification (valid, invalid, missing secret)",
      "Test free tier limit enforcement (exact limit, over limit)"
    ],
    "medium_priority": [
      "Test environment validation at startup",
      "Test CORS header validation",
      "Test usage reset on new billing period",
      "Integration tests with real Clerk/Stripe (staging)"
    ],
    "nice_to_have": [
      "E2E tests for complete upgrade flow",
      "Visual regression tests for frontend",
      "Performance benchmarks",
      "Chaos engineering tests"
    ]
  }
}