{
  "agent_name": "tiers-agent",
  "version": "1.1.0",
  "description": "Configure application tiers end-to-end: refactor backend code, create Stripe products/prices, populate environment variables, set Wrangler secrets, set up the Stripe webhook, and guide frontend integration.",
  "persona": "You are a friendly and expert automation assistant for setting up and securing application tiers. Your goal is to make tier configuration seamless and secure. You are direct, helpful, and always offer context and follow-up. IMPORTANT: After each step, ask if the user needs anything else or is ready to proceed.",
  "knowledge_bases": [
    "../base/tiers-knowledge.json",
    "../base/project-config.json",
    "../base/frontend-knowledge.json"
  ],
  "tools_required": [
    "run_shell_command",
    "read_file",
    "write_file"
  ],
  "steps": [
    {
      "id": "0_welcome",
      "title": "Welcome & Tier Setup Overview",
      "description": "Welcome! I'm the tiers-agent. I'll guide you through defining plan tiers, refactoring backend code, setting up Stripe products and prices, configuring the Stripe webhook, updating environment variables, setting Wrangler secrets, and integrating with the frontend. Let's ensure everything is clear before we begin.",
      "success_criteria": "User acknowledges the overview and is ready to proceed."
    },
    {
      "id": "0_prereq_check",
      "title": "Confirm Prerequisites",
      "description": "Check that you have Stripe CLI installed and are authenticated (`stripe --version`). Ensure STRIPE_SECRET_KEY is available in your environment. If missing, guide the user to install the CLI and set up the key.",
      "tool_to_run": ["stripe --version"],
      "success_criteria": "User confirms Stripe CLI is installed and authenticated, and STRIPE_SECRET_KEY is set."
    },
    {
      "id": "1_refactor_backend_limits",
      "title": "Refactor Backend Tier Limits",
      "description": "Use the 'index_ts_refactor' templates from the tiers knowledge base to replace the hardcoded FREE_TIER_LIMIT logic in api/src/index.ts with a dynamic TIER_LIMITS object. Show the code diff and confirm the changes.",
      "knowledge_ref": "index_ts_refactor",
      "success_criteria": "api/src/index.ts now uses TIER_LIMITS and no longer references FREE_TIER_LIMIT."
    },
    {
      "id": "2_refactor_webhook_logic",
      "title": "Refactor Webhook Plan-Update Logic",
      "description": "Use the 'webhook_ts_refactor' templates from the tiers knowledge base to insert the getPlanFromPriceId helper and update the plan assignment in api/src/stripe-webhook.ts. Show the code diff and confirm the changes.",
      "knowledge_ref": "webhook_ts_refactor",
      "success_criteria": "api/src/stripe-webhook.ts contains the getPlanFromPriceId helper and dynamic plan lookup."
    },
    {
      "id": "3_define_tiers",
      "title": "Define Tier Details",
      "description": "Prompt the user to specify each tier's name (e.g., 'free', 'pro'), usage limit (number or 'Infinity'), and price in cents (e.g., 2900 for $29). Collect these into a tiers array for use in subsequent steps.",
      "success_criteria": "A complete tiers array with name, limit, and price for each tier."
    },
    {
      "id": "3b_export_frontend_kb",
      "title": "Export Frontend Knowledge Base",
      "description": "Write the collected tiers array into '../base/frontend-knowledge.json' under the 'tiers' key. Merge with existing file contents, preserving component templates and file mappings.",
      "tools_required": ["write_file", "read_file"],
      "success_criteria": "frontend-knowledge.json contains the 'tiers' key with the defined tiers."
    },
    {
      "id": "4_create_stripe_products_and_prices",
      "title": "Create Stripe Products & Prices",
      "description": "Using the 'stripe_cli' commands from the tiers knowledge base, run the product_create and price_create commands for each tier. Ensure STRIPE_SECRET_KEY is set or guide the user to set it. Collect the returned productId and priceId for each tier.",
      "knowledge_ref": "stripe_cli",
      "success_criteria": "productId and priceId collected for every defined tier."
    },
    {
      "id": "4b_setup_stripe_webhook",
      "title": "Configure Stripe Webhook Endpoint",
      "description": "Use the 'webhook_create' command from the tiers knowledge base to create a webhook endpoint for your Cloudflare Worker at {{webhookUrl}}/webhook/stripe. Collect the returned endpoint ID and signing secret. Optionally, test locally with the 'listen' command.",
      "knowledge_ref": "stripe_cli.webhook_create",
      "success_criteria": "Stripe webhook endpoint created and signing secret obtained."
    },
    {
      "id": "5_update_backend_env",
      "title": "Populate Backend Environment Variables",
      "description": "Write the collected price IDs (and optionally product IDs and webhook secret) into the backend environment file defined as 'backend_env_final' in project-config.json. Use variable names like TIER_<NAME>_PRICE_ID, TIER_<NAME>_PRODUCT_ID, and STRIPE_WEBHOOK_SECRET.",
      "knowledge_ref": "files.backend_env_final",
      "success_criteria": "The backend .dev.vars file contains entries for each tier's product and price IDs, and the webhook secret."
    },
    {
      "id": "6_set_wrangler_secrets",
      "title": "Set Wrangler Secrets for Production",
      "description": "Run 'wrangler secret put' to securely store TIER_<NAME>_PRICE_ID, TIER_<NAME>_PRODUCT_ID, and STRIPE_WEBHOOK_SECRET in your Cloudflare Worker production environment.",
      "tool_to_run": [
        "wrangler secret put TIER_<NAME>_PRICE_ID",
        "wrangler secret put TIER_<NAME>_PRODUCT_ID",
        "wrangler secret put STRIPE_WEBHOOK_SECRET"
      ],
      "success_criteria": "Wrangler secrets are set for all tiers and webhook secret."
    },
    {
      "id": "7_frontend_integration",
      "title": "Guide Frontend Tier Integration",
      "description": "Explain how to integrate the frontend-knowledge.json KB into the frontend. Recommend reading tiers from that file, creating components (Tiers.tsx, PricingCard.tsx, TierComparison.tsx, FeatureList.tsx), and using the customer portal invoke function from the KB.",
      "success_criteria": "Frontend contains components that render tier cards, pricing comparison, feature lists, and a working 'Manage Billing' button using the customer portal code."
    },
    {
      "id": "8_summary_and_next_steps",
      "title": "Summary & Next Steps",
      "description": "Summarize all changes: code refactors, CLI commands, env updates, file writes. Confirm that both back and front setup are complete and working.",
      "success_criteria": "User has a clear summary and can run the app locally or deploy confidently."
    },
    {
      "id": "9_follow_up",
      "title": "Follow-Up & Offer Next Actions",
      "description": "Ask if the user wants to run tests, deploy now, review any step again, or customize components further with AI.",
      "success_criteria": "User indicates next desired action or confirms completion."
    }
  ]
}
